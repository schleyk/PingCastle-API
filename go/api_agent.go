/*
 * PingCastle API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: v1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"encoding/json"
	"fmt"
	"net/http"
	"os"
	"strings"
)

const (
	apiWhitelistKey = "test"
	DataPath        = "data"
)

func ApiAgentLoginPost(w http.ResponseWriter, r *http.Request) {
	j := json.NewDecoder(r.Body)
	var d LoginData
	j.Decode(&d)
	// validate api key
	if apiWhitelistKey != d.APIKey {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	// APIkey + Location = Token
	token := fmt.Sprintf("%s:%s", d.APIKey, d.Location)
	w.WriteHeader(http.StatusOK)
	w.Write([]byte(token))
}

func ApiAgentSendReportPost(w http.ResponseWriter, r *http.Request) {

	// Check token oder http 400
	authHeader := r.Header.Get("Authorization")
	authHeaderParts := strings.SplitN(authHeader, " ", 2)
	token := authHeaderParts[1]

	tokenParts := strings.SplitN(token, ":", 2)
	apikey := tokenParts[0]
	// extrahieren von location
	location := tokenParts[1]

	if apiWhitelistKey != apikey {
		w.WriteHeader(http.StatusUnauthorized)
		return
	}

	// empfangen von filename und xmlReport
	j := json.NewDecoder(r.Body)
	var d ReportData
	j.Decode(&d)

	// ablegen von xmlReport in "location-filename" auf Filesystem
	name := fmt.Sprintf("%s-%s", location, d.Filename)
	err := os.WriteFile(name, []byte(d.XmlReport), 0644)

	if err != nil {
		fmt.Println(err)
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}
